/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { FormidableFile } from "@react-libraries/next-apollo-server"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
  Upload: FormidableFile
}

export interface NexusGenObjects {
  Category: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FireStore: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    mimeType: string; // String!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: {};
  Post: { // root type
    authorId: string; // String!
    cardId?: string | null; // String
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    published: boolean; // Boolean!
    publishedAt: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  System: { // root type
    cardId?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    iconId?: string | null; // String
    id: string; // ID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Category: { // field return type
    Posts: NexusGenRootTypes['Post'][]; // [Post!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FireStore: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    mimeType: string; // String!
    name: string; // String!
    postCards: NexusGenRootTypes['Post'][]; // [Post!]!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    systemCards: NexusGenRootTypes['System'][]; // [System!]!
    systemIcons: NexusGenRootTypes['System'][]; // [System!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: { // field return type
    Category: NexusGenRootTypes['Category']; // Category!
    Post: NexusGenRootTypes['Post'] | null; // Post
    PostFile: NexusGenRootTypes['FireStore']; // FireStore!
    SignIn: NexusGenRootTypes['User'] | null; // User
    System: NexusGenRootTypes['System']; // System!
  }
  Post: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    card: NexusGenRootTypes['FireStore'] | null; // FireStore
    cardId: string | null; // String
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    postFiles: NexusGenRootTypes['FireStore'][]; // [FireStore!]!
    published: boolean; // Boolean!
    publishedAt: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    Categories: NexusGenRootTypes['Category'][]; // [Category!]!
    Category: NexusGenRootTypes['Category']; // Category!
    Post: NexusGenRootTypes['Post']; // Post!
    Posts: NexusGenRootTypes['Post'][]; // [Post!]!
    System: NexusGenRootTypes['System']; // System!
  }
  System: { // field return type
    card: NexusGenRootTypes['FireStore'] | null; // FireStore
    cardId: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    icon: NexusGenRootTypes['FireStore'] | null; // FireStore
    iconId: string | null; // String
    id: string; // ID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // field return type
    Post: NexusGenRootTypes['Post'][]; // [Post!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    Posts: 'Post'
    createdAt: 'DateTime'
    id: 'ID'
    name: 'String'
    updatedAt: 'DateTime'
  }
  FireStore: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    mimeType: 'String'
    name: 'String'
    postCards: 'Post'
    posts: 'Post'
    systemCards: 'System'
    systemIcons: 'System'
    updatedAt: 'DateTime'
  }
  Mutation: { // field return type name
    Category: 'Category'
    Post: 'Post'
    PostFile: 'FireStore'
    SignIn: 'User'
    System: 'System'
  }
  Post: { // field return type name
    author: 'User'
    authorId: 'String'
    card: 'FireStore'
    cardId: 'String'
    categories: 'Category'
    content: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    postFiles: 'FireStore'
    published: 'Boolean'
    publishedAt: 'DateTime'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    Categories: 'Category'
    Category: 'Category'
    Post: 'Post'
    Posts: 'Post'
    System: 'System'
  }
  System: { // field return type name
    card: 'FireStore'
    cardId: 'String'
    createdAt: 'DateTime'
    description: 'String'
    icon: 'FireStore'
    iconId: 'String'
    id: 'ID'
    title: 'String'
    updatedAt: 'DateTime'
  }
  User: { // field return type name
    Post: 'Post'
    createdAt: 'DateTime'
    email: 'String'
    id: 'ID'
    name: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    Category: { // args
      id?: string | null; // String
      name: string; // String!
    }
    Post: { // args
      card?: NexusGenScalars['Upload'] | null; // Upload
      categories?: string[] | null; // [String!]
      content?: string | null; // String
      id?: string | null; // String
      isTrash?: boolean | null; // Boolean
      published?: boolean | null; // Boolean
      publishedAt?: NexusGenScalars['DateTime'] | null; // DateTime
      title?: string | null; // String
    }
    PostFile: { // args
      binary: NexusGenScalars['Upload']; // Upload!
      postId: string; // String!
    }
    SignIn: { // args
      token?: string | null; // String
    }
    System: { // args
      description?: string | null; // String
      icon?: NexusGenScalars['Upload'] | null; // Upload
      title?: string | null; // String
    }
  }
  Query: {
    Category: { // args
      id: string; // String!
    }
    Post: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}